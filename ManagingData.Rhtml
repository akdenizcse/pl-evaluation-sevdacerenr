<html>

<head>
<title>Title</title>
</head>

<body>

<b>Managing Data Using R</b>

<p> 
- Fixing data quality problems
- Organizing your data for the modeling process
</p>

<!--begin.rcode
library(ggplot2)
end.rcode-->

<p>Treating missing values (NAs)</p>

<!--begin.rcode 
custdata <- read.table('https://github.com/scizmeli/datascience_class_helper_files/raw/master/custdata1.tsv',header=T,sep=',')

end.rcode-->

<p> There are two things you can do with these variables: 

drop the rows with missing values or convert the missing values to a meaningful value. </p>

<!--begin.rcode 
summary(custdata[,c("housing.type" ,"recent.move" , "num.vehicles" , "is.employed")])
end.rcode-->

<p> The is.employed variable is missing many values.
Is employment status unknown? </p>

<!--begin.rcode 
custdata$is.employed.fix <- ifelse(is.na(custdata$is.employed),
"missing",
ifelse(custdata$is.employed==T,
"employed",
"not employed"))
summary(as.factor(custdata$is.employed.fix))

custdata$is.employed.fix <- ifelse(is.na(custdata$is.employed),
"not in active workforce",
ifelse(custdata$is.employed==T,
"employed",
"not employed"))
summary(as.factor(custdata$is.employed.fix))
end.rcode-->

<p> MISSING VALUES IN NUMERIC DATA </p>

<!--begin.rcode 
summary(custdata$Income)

meanIncome <- mean(custdata$Income, na.rm=T)
meanIncome
end.rcode-->

<p>WHEN VALUES ARE MISSING RANDOMLY.

You might believe that the data is missing because of a faulty sensor-in other words, the data collection failed at random. In this case, you can replace the missing values with the expected, or mean, income </p>


<!--begin.rcode 
meanIncome <- mean(custdata$Income, na.rm=T)

Income.fix <- ifelse(is.na(custdata$Income),
meanIncome, custdata$Income)

summary(Income.fix)
end.rcode-->

<p> WHEN VALUES ARE MISSING SYSTEMATICALLY.

One thing you can do is to convert the numeric data into categorical data, and then use the methods that we discussed previously. In this case, you would divide the income into some income categories of interest, such as "below $10,000," or "from $100,000 to $250,000" using the cut() function, and then treat the NAs as we did when working with missing categorical values. </p>

<!--begin.rcode 
breaks <-c(0, 10000, 50000, 100000, 250000, 1000000)

Income.groups <-
cut(custdata$Income,breaks = breaks, include.lowest=T)

summary(Income.groups)

Income.groups <- as.character(Income.groups)

Income.groups <- ifelse(is.na(Income.groups),"no income", Income.groups)

summary(as.factor(Income.groups))
end.rcode-->

<p> Data transformations </p>

<!--begin.rcode 

medianincome <- aggregate(income~state.of.res,custdata,FUN=median)
colnames(medianincome) <- c('State','Median.Income')
summary(medianincome) 

end.rcode-->

<!--begin.rcode 

is.data.frame(medianincome)

head(medianincome)

custdata <- custdata[, names(custdata)!="Median.Income"]
custdata <- merge(custdata, medianincome, by.x = "state.of.res", by.y="State")

head(custdata[, c("state.of.res","income","Median.Income")])

end.rcode-->

<!--begin.rcode 

summary(custdata[, c("state.of.res","income","Median.Income")])

custdata$income.norm <- with(custdata, income/Median.Income)

summary(custdata$income.norm)

end.rcode-->

<p> Normalize income by Median.Income. </p>

<!--begin.rcode 

ggplot(subset(custdata, custdata$income > 1000), aes(x=income, y=as.numeric(health.ins))) +
   geom_point(alpha=0.5, position=position_jitter(w=0.05, h=0.05)) + geom_smooth() + scale_x_log10() + 
   annotation_logticks(sides="bt") 

end.rcode-->

<p> You see that you can replace the income variable with a Boolean variable that indicates whether income is less than $20,000 </p>

<!--begin.rcode 

custdata$income.lt.20K <- custdata$income < 20000
summary(custdata$income.lt.20K)

end.rcode-->

</body>
</html>
